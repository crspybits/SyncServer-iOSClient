SyncServer-iOSClient

Version 18.9.0 (1/2/19)
	* Enabling pending uploads to occur when app comes into foreground, online, or is launched.
		https://github.com/crspybits/SharedImages/issues/146
	* Added isSyncing and uploadsPending properties

Version 18.8.0 (12/30/18)
	* Trying to fix issue where stopping a download mid-way through, and then restarting, could leave a client in a state where it didn't have all the files.
		https://github.com/crspybits/SyncServer-iOSClient/issues/63
	* Migration-style change for users to bring their files back into order given the issues in https://github.com/crspybits/SyncServer-iOSClient/issues/63
		Note: This change gets carried out, per album, when a user syncs that album.
	* Added isSyncing client method.
	* Remove debugging output.
	
Version 18.7.3 (12/25/18)
	* Update pods in Example
	* Trying to diagnose https://github.com/crspybits/SharedImages/issues/107
		By adding asserts to test cases.
	* Fixed client problem with detecting master version update.
	* Fixed issue with upload trackers not being removed when an error occurs.
	
Version 18.7.2 (12/14/18)
	* Fixing part of sharing invitation issue:
		https://github.com/crspybits/SharedImages/issues/152

Version 18.7.1 (12/14/18)
	* Fixing issue that came up for Natasha-- when she attempted to upload many files offline.
	* Fixed UX issue for text/label on login when sharing.
	* Fixed issue with Facebook library dependency that caused you to be unable to accept a sharing invitation with Facebook.

Version 18.7.0 (12/5/18)
	* Trying to fix keychain issue
		https://github.com/crspybits/SyncServerII/issues/61

Version 18.6.0 (12/1/18)
	* Added new event to report minimum iOS app version.
	* Added in a couple of missing cases for reporting the server being down.
		https://github.com/crspybits/SyncServer-iOSClient/issues/41
		
Version 18.5.0 (11/29/18)
	* Added parameter to ServerNetworking for failover message-- 
		when server is down for maintenance.
	* Added new event to report server being down.

Version 18.4.1 (11/24/18)
	* Fixed issue: Enable "gone" files to be deleted.

Version 18.4.0 (11/24/18)
	* Added cloudStorageType migration for SharingEntry's for sharing users.
	* Added other CoreData migrations.
	
Version 18.3.0 (11/23/18)
	* Fixing some issues relating to removing a sharing users owning user.
		And adding alert messages for user for this too.
	* Added a new event (sharingGroupOwningUserRemoved) to better inform sharing 
		users if their owning user is removed.
	* Updated to revised SMCoreLib & SwiftyDropbox.
	
Version 18.2.0 (11/21/18)
	* Improving API/calling interface for getAttributes and requestDownload

Version 18.1.0 (11/19/18)
	* Changed to using gone in normal response from download endpoint so that appMetaData is included in the syncServerFileGroupDownloadGone delegate method.
	* Added download request for individual files for client app.

Version 18.0.0 (11/18/18)
	* Integrating checksum changes from server.
	* Integrating HTTP status gone changes from server.
	* See also:
		https://github.com/crspybits/SyncServer-iOSClient/issues/61
		https://github.com/crspybits/SyncServer-iOSClient/issues/30
		
Version 17.2.0 (10/13/18)
	* Added migration table.

Version 17.1.0 (10/9/18)
	* Added sync method without sharingGroupUUID parameter-- to only sync sharing groups.
	* Removed getStats(sharingGroupUUID: String, completion:@escaping (Stats?)->()) method-- because a) it's no longer needed for SharedImages due to the change in badge UI/UX, and b) because it's not consistent with the sync operation (with no callbacks) in the rest of the interface. Also, some of this information is now available from the `sharingGroups` property through syncNeeded.
	* Swift 3.2 is needed for this library, but Swift 4.2 is needed for some dependencies-- so this needs to be built with at least Xcode 10.

Version 17.0.1 (9/23/18)
	* Fixed git hub tagging.
	
Version 17.0.0 (9/23/18)
	* Client sync method can now throw-- to account for bad sharingGroupId parameter.
	* Updates for multiple sharing groups per user on server.
		https://github.com/crspybits/SyncServer-iOSClient/issues/46
	* Change from having sharing group id generation on server to having it on client
		(sharingGroupUUID)
		
Version 16.2.0 (7/28/18)
	* Adding new event: For reporting update of sharing group ids.

Version 16.1.1 (7/28/18)
	* Fix github versioning issue.

Version 16.1.0 (7/28/18)
	* Migration- for server version 0.16.3
		- Give all of the Directory Entry's a sharingGroupId.
		- Give any pending uploads or downloads a sharingGroupId: Download content groups, Upload trackers, Download trackers.

Version 16.0.0 (7/24/18)
	* Added sharingGroupId to SyncAttributes and more generally added in sharing groups. Only working with a single sharing group currently.

Version 15.6.0 (6/20/18)
	* Updated version of SyncServer-Shared library
	
Version 15.5.0 (6/16/18)
	* Trying to resolve: Lost network
		Note that these issues started after I introduced a network detection change into the SyncServer client-- and so I'm going to try to resolve this at the client level.
		https://github.com/crspybits/SharedImages/issues/125
	* Added `.syncDelayed` event.
		Trying to deal with https://github.com/crspybits/SharedImages/issues/126
		
Version 15.4.3 (6/12/18)
	* Update to Pod (GoogleSignIn)-- to add bitcode due to a problem building SharedImages for release.

Version 15.4.2 (6/10/18)
	* Fix issue with naming of Google Sign In framework-- the GoogleSignIn.bundle was not being loaded if the framework name didn't match.
	* Moved Google Sign In to its own pod to deal with resolving GoogleSignIn.bundle issue. See https://github.com/crspybits/GoogleSignIn
		
Version 15.4.1 (6/9/18)
	* A few adjustments for the last changes to Google Sign In.

Version 15.4.0 (6/7/18)
	* Now have Google SignIn as Cocoapod subspec-- had to convert Google Sign In to a dynamic framework.
		https://github.com/crspybits/SyncServer-iOSClient/issues/16
		
Version 15.3.0 (5/27/18)
	* Now using https://github.com/dustturtle/RealReachability to detect network before making server calls.
	
Version 15.2.0 (5/24/18)
	* Fixed: Dany issue: Multiple quick refreshes cause a crash
		https://github.com/crspybits/SharedImages/issues/101
		(Apparently due to a deadlock)
	* Attempted fix of https://github.com/crspybits/SharedImages/issues/110 by not checking for a lack of network connection before an endpoint call to the server. I'm wondering if I'm getting false indications of a lack of a network. Now using the network check as a diagnostic after an error instead.
	* Added in a check for cellular data connection
		https://github.com/crspybits/SharedImages/issues/106
	* Fixing a Core Data synchronization issue
		I had generally been allowing for multiple concurrent calls to `performAndWait`-- which can apparently result in deadlocks. I am now serializing these requests-- see CoreDataSync
		
Version 15.1.1 (5/19/18)
	* Fixed a bug where in some cases (who knows why!) DirectoryEntry's don't always have mimeType's.

Version 15.1.0 (5/19/18)
	* Fixed issue with core data model: New attribute should have been optional to support migration.
	* Added new client method-- `getAttributes` to enable a client to get SyncAttributes for a file.
	* Fixed name conflict in NSUserDefault variable.
	* Added "migration" to enable DirectoryEntry's to be updated with fileGroupUUID's when they had them on the server but didn't have them in the DirectoryEntry.
	
Version 15.0.2 (5/15/18)
	* Added a migration
	
Version 15.0.1 (5/15/18)
	* Fixed issue with public qualifier on DownloadOperation member in delegate method.
	* Now when a client gives `rejectDownloadDeletion` as a conflict resolution to a download deletion, this will reject download deletion for *all* of the pending files with the same fileGroupUUID-- in order to maintain file group integrity. See also https://github.com/crspybits/SharedImages/issues/77
	
Version 15.0.0 (5/13/18)
	* Added fileGroupUUID & file group support.
		This is a breaking change in terms of delegate callbacks-- the download delegate callback now deals with file groups.
		https://github.com/crspybits/SyncServerII/issues/59
		https://github.com/crspybits/SyncServer-iOSClient/issues/29
	* Fixed an issue with conflicts between download deletions and appMetaData uploads
		This situation cannot be resolved by a client with .rejectDownloadDeletion(.keepContentUpload) because an app meta data upload cannot replace the content of a previously deleted file.
	* Fixed an issue with tracker logging-- syncing data to log file.
	
Version 14.3.1 (5/3/18)
	* Fix faulting in issue-- with logging tracking state.

Version 14.3.0 (5/3/18)
	* Added debug logging code to output state of Core Data objects.
	* Added code to reset the state of those Core Data objects.
	* Fixed Git issue-- hadn't been tracking Pods in Example app and wass causing problems.
	
Version 14.2.0 (4/23/18)
	* Added code to do some "garbage collection" cleanup + handle a migration issue.
	
Version 14.1.0 (4/18/18)
	* Improving client interface for conflict resolution: With respect to appMetaData.
	
Version 14.0.1 (4/16/18)
	* Add migration code for appMetaData versioning.
	
Version 14.0.0 (4/16/18)
	* Added versioning to appMetaData:
		- Included use of two new server endpoints.
		- And new shared library version.
	* Added test cases.
	
Version 13.0.0 (3/1/18)
	* Updates for mime type and cloud folder name changes on the server.
	* Breaking changes to `appLaunchSetup` for SyncServer and SyncServerUser.

Version 12.0.1 (2/11/18)
	* Fixed issue with mis-reporting of error of mime type change.
	
Version 12.0.0 (2/11/18)
	* Added minimumServerVersion parameter to `appLaunchSetup`, and  `badServerVersion` error if the server doesn't meet the minimum. (Not using a delegate for this because presumably a client is only going to have a static need for a minimum server version).
	* Added syncServerUserId into SyncServerUser-- needed this for a unique, cross user identifier, in SharedImages. And it was contained internally-- just exposed it. Not going to *ever* send this back to the server-- just for purely client usage.
 	* Fixed issue where, on downloading a file, the mimeType wasn't set in the directory.
 	* Fixed issue: Need to cache the appMetaData for files in the local directory-- to deal with the case where the client uploads the file, but gives the appMetaData as nil, to not update it. But, we still need that meta data locally for callback for client. As a result of this, needed to change Core Data objects to have appMetaData.
 	* Added `uploadCopy` method to main SyncServer client interface-- to deal with queuing changed versions of a file and not making immutable assumption.
  	* Added test cases.
 	
Version 11.0.1 (1/28/18)
	* Fixed bug in incrementing age for file trackers
		Somehow my use of synchronization was causing an infinite loop, incrementing this age value. Very odd. Hacked my way around it.
	* Added another test case-- a situation that I'm using in SharedImages but that I hadn't tested for yet.

Version 11.0.0 (1/27/18)
	* Added multi-version file support
	* Upload undeletion added at Server API level.
	* Added support for conflict resolution, including new delegate methods (breaking change)
	* Fixed a longstanding issue: UploadFileTracker's were not being removed after files were uploaded or upload deleted.
	* Added test cases in example app.
	
Version 10.0.0 (1/7/18)
	* Continue operation in the background-- at least for the current upload or download.
		https://github.com/crspybits/SharedImages/issues/36
	* When the app launches, the state of FileTrackers are now reset-- in case there was a download or upload occurring when the app stopped. Previously, an error would first be be reported and then downloads/uploads could be resumed.
	* Added network-level caching of the results of file uploading and downloading-- in the case where we no longer have callback methods for the upload or download. We're now going to be doing URLSession uploads and downloads, so this can happen when the app is relaunched to deal with an upload or download.
	* Removed couldNotReadUploadFile from SyncServerError-- not used any more (breaking change).
	* Upload ServerAPI now getting response back in header key (breaking change)
		This is because of the way background uploads work in iOS-- they split the body contents of an HTTP request and the header contents across two different delegate calls, which makes it difficult to coordinate.
	* Fixed an issue with resuming an upload after a crash or other app termination.
	* I tried to update to Swift 4.0 but this seems difficult because not all component Cocoapods are at 4.0. So, I reverted back to 3.2.
	
Version 9.0.0 (12/30/17)
	* Changed sharing invitation interface to deal with:
		https://github.com/crspybits/SharedImages/issues/42
		
Version 8.0.0 (12/29/17)
	* Changed names and types of error returns-- breaking change.
		This was to support https://github.com/crspybits/SharedImages/issues/53 and https://github.com/crspybits/SyncServerII/issues/39
	* Added new SyncEvent: willStartUploads-- breaking change.
	* Fixed some Dropbox signin UI/button issues--
		1) Layout not adjusting to frame sizes.
		2) Signout not displaying when account first created.
	* Factored out some sign in code and put in an extension of GenericSignIn
		This was to deal with issue in SharedImages where, after first creating
		an account, the transition to the images tab would occur too quickly and
		would not allow the prompt to ask the user if they want notifications.
	* Fixed-- New Image: Date doesn't get replaced with actual server date
		https://github.com/crspybits/SharedImages/issues/44
		The event `singleFileUploadComplete` now reports actual creation and update dates on the server.
	* Extended healthcheck API server endpoint.
	* Added client method to reset local meta data. E.g., this could be useful as part of a process to remove all user data from an app. (Note that this method was present in testing already, this just exposes it to client callers).
	
Version 7.0.3 (12/25/17)
	* Small bug fixes
	
Version 7.0.0 (12/25/17)
	* Adding Dropbox support-- in client and example app.
		- via a new subspec (Dropbox) in the Cocoapod.
	* Fixed breaking change in Facebook SDK
	* Changes for TappableButton-- bringing back to Swift 4
	* Made the ServerAPI usage of delegate:SyncServerDelegate optional `?` because it was causing my tests to crash, and it's just used for reporting events.
	* Cleaned up some code in the GoogleSignIn
	* Cleaned up podspec
	* Using different header key for Google authentication authorization code-- breaking change.
	* Fixed on ~> 1.2 for Gloss dependency-- due to breaking change I'm not ready for in Gloss 2.0
	* Added Dropbox into test cases; fixed issues with two test cases.
	
Version 6.0.1 (12/3/17)
	* Client not properly logged in, but no decent indication on UI
		https://github.com/crspybits/SharedImages/issues/64
	* Added a delegate method and alert to give feedback to user when we get a 401/unauthorized back from the user (and can't refresh their sign-in)
	
Version 6.0.0 (12/2/17)
	* Changed parameters of enum case willStartDownloads-- to add deletions.
	
Version 5.0.1 (11/29/17)
	* Attempted a fix to issue Dany was having with sticky sign-in. Added logging for this too, so if problem happens again, I should be able to debug it more easily.
		https://github.com/crspybits/SharedImages/issues/51

Version 5.0.0
	* Enabled sticky sign-in's: So user's don't have to signed-in as much. This is a breaking change because it changed the signature of methods in sign-in protocols and added a method in a sign-in protocol. Sticky sign-in also changes the character or emphasis of sign-in's in the SyncServer client. This required changes to the Google and Facebook signin's. 

Version 4.1.1
	* ?? 
	
Version 4.1.0
	* fixed bug where call to func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
	in the SyncManager would fail with an assertion if user was not signed in.
	
	* Enabled more general sign-in when redeeming sharing invitation.
		See also https://github.com/crspybits/SharedImages/issues/43

Version 4.0.0; 9/23/17
	* Added event (willStartDownloads) to indicate the number of downloads that will happen.

	* Making Downloads More Flexible in the SyncServer
		http://www.spasticmuffin.biz/blog/2017/09/15/making-downloads-more-flexible-in-the-syncserver/
		We are no longer going to discard all files if a failure occurs in the download. The local meta data is going to get updated with *every* download. We're moving to a more "eventual consistency" type of approach for downloads at least.
		
	* Removed various events, and replaced a SyncServerDelegate method. This is a breaking change relative to prior versions of the client interface.
	
	* Added more test cases for this eventual consistency change.
		
	* Add client call to cancel ongoing sync operation.
		E.g., this should be useful if downloads stall for some reason. 
	
	* Add tests for cancelling ongoing sync operation.
	
	* Removed unused properties on DownloadFileTracker objects due to these changes:
	     appMetaData, fileSizeBytes, localURL

Version 3.2.0; 9/9/17; 
	* Using version 2.1 of SyncServer-Shared-- to deal with NGNIX issue.

8/29/17	
	* Removed usage of update/creation dates from code internally.
	
	* Added new version (version 3) to Core Data model because of this.
		Lightweight migration on Core Data in order to remove update/creation dates from the upload tracker.
	
	* Fix bug with creation date where upload would crash
	
	* Added new client method to delete an array of files atomically.
		This required the addition of an undo manager to Core Data.
	